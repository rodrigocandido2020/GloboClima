@page "/favoritos"
@using GloboClima.Web.Shared.Servico
@using GloboClima.Web.Shared.ViewModels
@inject ServicoFavorito ServicoFavorito

<h3>Favoritos</h3>

@if (!string.IsNullOrWhiteSpace(erro))
{
    <div class="alert alert-danger">@erro</div>
}

@if (string.IsNullOrWhiteSpace(erro) && favoritos == null)
{
    <p><em>Carregando favoritos...</em></p>
}

@if (string.IsNullOrWhiteSpace(erro) && favoritos is { Count: 0 })
{
    <div class="alert alert-info">Nenhum favorito salvo ainda.</div>
}

@if (string.IsNullOrWhiteSpace(erro) && favoritos is { Count: > 0 })
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Cidade</th>
                <th>País</th>
                <th>Código do País</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var fav in favoritos)
            {
                <tr>
                    <td>@fav.Cidade</td>
                    <td>@fav.NomePais</td>
                    <td>@fav.CodigoPais</td>
                    <td>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeletarFavorito(fav.Id)">
                            <span class="oi oi-trash me-1"></span> Remover
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<FavoritoViewModel>? favoritos;
    private string? erro;

    protected override async Task OnInitializedAsync()
    {
        var (lista, erroMsg) = await ServicoFavorito.ObterFavoritosAsync();
        favoritos = lista;
        erro = erroMsg;
    }

    private async Task DeletarFavorito(string id)
    {
        var (sucesso, listaAtualizada, erroMsg) = await ServicoFavorito.DeletarFavoritoAsync(id);
        if (sucesso)
        {
            favoritos = listaAtualizada;
        }
        else
        {
            erro = erroMsg;
        }
    }
}
