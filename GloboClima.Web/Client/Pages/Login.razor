@page "/login"
@using GloboClima.Web.Shared.Servico
@using GloboClima.Web.Shared.ViewModels
@inject ServicoLogin ServicoLogin

<h3>Login</h3>

@if (jaLogado)
{
    <div class="alert alert-info">Você já está logado.</div>
    <button class="btn btn-danger" @onclick="Logout">
        <span class="oi oi-account-logout me-1"></span> Sair
    </button>
}

@if (!jaLogado)
{
    <EditForm Model="@loginModel" OnValidSubmit="EfetuarLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="col-4">
            <div class="mb-3">
                <label class="form-label">Usuário</label>
                <InputText class="form-control" @bind-Value="loginModel.Nome" />
                <ValidationMessage For="@(() => loginModel.Nome)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Senha</label>
                <InputText class="form-control" @bind-Value="loginModel.Senha" type="password" />
                <ValidationMessage For="@(() => loginModel.Senha)" />
            </div>
        </div>


        @if (!string.IsNullOrEmpty(erro))
        {
            <div class="alert alert-danger">@erro</div>
        }

        <button type="submit" class="btn btn-primary">Entrar</button>
    </EditForm>
}

@code {
    private LoginViewModel loginModel = new();
    private string? erro;
    private bool jaLogado = false;

    protected override async Task OnInitializedAsync()
    {
        jaLogado = await ServicoLogin.UsuarioJaLogado();
    }

    private async Task EfetuarLogin()
    {
        erro = null;

        var (sucesso, erroMsg) = await ServicoLogin.Login(loginModel);

        if (!sucesso)
        {
            erro = erroMsg;
        }
    }

    private async Task Logout()
    {
        await ServicoLogin.Logout();
    }
}