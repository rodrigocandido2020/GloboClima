@page "/login"
@using GloboClima.Web.Shared.LoginViewModels
@using GloboClima.Web.Shared.Servico
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject servicoAPI Api

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Usuário</label>
        <InputText class="form-control" @bind-Value="loginModel.NomeUsuario" />
        <ValidationMessage For="@(() => loginModel.NomeUsuario)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Senha</label>
        <InputText class="form-control" @bind-Value="loginModel.Senha" type="password" />
        <ValidationMessage For="@(() => loginModel.Senha)" />
    </div>

    @if (!string.IsNullOrEmpty(erro))
    {
        <div class="alert alert-danger">@erro</div>
    }

    <button type="submit" class="btn btn-primary">Entrar</button>
</EditForm>

<h3>Login</h3>

@code {
    private loginModel loginModel = new();
    private string? erro;

    private async Task HandleLogin()
    {
        erro = null;

        var (resultado, problema) = await Api.PostAsync<TokenResponse>("api/auth", loginModel);

        if (problema != null)
        {
            erro = problema.Detail;
            return;
        }

        if (!string.IsNullOrEmpty(resultado?.Token))
        {
            await JS.InvokeVoidAsync("localStorage.setItem", "authToken", resultado.Token);
            Navigation.NavigateTo("/");
        }
    }
}